// B√†i t·∫≠p: C·∫•u tr√∫c d·ªØ li·ªáu trong l·∫≠p tr√¨nh Dart
void main()
{
  //B√†i 1: List
  // 1.1: C√≥ bao nhi√™u c√°ch ƒë·ªÉ khai b√°o m·ªôt List trong ƒëo·∫°n code? Li·ªát k√™ v√† gi·∫£i th√≠ch t·ª´ng c√°ch.
    List<String> list1 = ['1', '2', '3']; // khai b√°o tr·ª±c ti·∫øp
    var list2 = [1, 2, 3]; // Khai b√°o ki·ªÉu var
    List<String> list3 = []; // Khai b√°o r·ªóng
    var list4 = List<int>.filled(3,2); //List c√≥ kthuoc c·ªë ƒë·ªãnh [0,0,0];
    print('list1: $list1, list2: $list2, list3: $list3, list4: $list4');

    // 1.2 Cho List ['A', 'B', 'C']. Vi·∫øt code ƒë·ªÉ:
    
    //Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
    var listABC = ['A','B','C'];
    listABC.add('D'); // th√™m ph·∫ßn t·ª≠ D
    print(listABC);

    // Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
    listABC.insert(1, 'X'); // ch√®n ph·∫ßn t·ª≠ X v√†o vtri 1
    print(listABC);

    //X√≥a ph·∫ßn t·ª≠ 'B'
    listABC.removeAt(2); // x√≥a ph·∫ßn t·ª≠ B
    print(listABC);

    // In ra ƒë·ªô d√†i c·ªßa List
    print(listABC.length);

    // 1.3 ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
  var list  = [1, 2, 3, 4, 5];
  list.removeWhere((e) => e % 2 == 0);
  print(list);
    // Gi·∫£i th√≠ch: x√≥a t·∫•t c·∫£ c√°c h√†m t·ª≠ th·ªèa m√£n di·ªÅu ki·ªán e. T·ª©c l√† c√°c s·ªë ch·∫µn (2,4)

    // 1.4 Gi·∫£i th√≠ch s·ª± kh√°c nhau gi·ªØa:
    // remove() v√† removeAt()
   /* remove(value): X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c√≥ gi√° tr·ªã kh·ªõp v·ªõi value.
      removeAt(index): X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ index.
      V√≠ d·ª•: list.remove('A') x√≥a 'A', c√≤n list.removeAt(0) x√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n. */

    // add() v√† insert()
    /*add(value): Th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi List.
      insert(index, value): Ch√®n ph·∫ßn t·ª≠ v√†o v·ªã tr√≠ index.
      V√≠ d·ª•: list.add('D') th√™m 'D' v√†o cu·ªëi, c√≤n list.insert(1, 'X') ch√®n 'X' v√†o v·ªã tr√≠ 1. */

    // addAll() v√† insertAll()
    /* addAll(iterable): Th√™m to√†n b·ªô ph·∫ßn t·ª≠ t·ª´ m·ªôt t·∫≠p h·ª£p (nh∆∞ List) v√†o cu·ªëi List.
       insertAll(index, iterable): Ch√®n to√†n b·ªô ph·∫ßn t·ª≠ t·ª´ t·∫≠p h·ª£p v√†o v·ªã tr√≠ index.
       V√≠ d·ª•: list.addAll(['E', 'F']) th√™m v√†o cu·ªëi, c√≤n list.insertAll(0, ['X', 'Y']) ch√®n v√†o ƒë·∫ßu. */

  // B√†i 2: Set
    //2.1: Set kh√°c List ·ªü nh·ªØng ƒëi·ªÉm n√†o? N√™u √≠t nh·∫•t 3 ƒëi·ªÉm kh√°c bi·ªát.
  /* - Set l√† t·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ ko tr√πng l·∫∑p
     - KH√¥ng c√≥ th·ª© t·ª± x√°c ƒë·ªãnh
     - M·ªói ph·∫ßn t·ª≠ ch·ªâ xu·∫•t hi·ªán m·ªôt l·∫ßn */  

    //2.2: Cho hai set
    var set1 = {1, 2, 3};
    var set2 = {3, 4, 5};
    // Union: Giao
    var union = set1.union(set2);
    print(union); 

    // Intersection: H·ª£p
    var intersection = set1.intersection(set2);
    print(intersection);

    // Difference(hi·ªáu) c·ªßa set1 v√† set2
    var difference = set1.difference(set2);
    print(difference);
    var difference1 = set2.difference(set1);
    print(difference1);

  //2.3 ƒêo·∫°n code sau cho k·∫øt qu·∫£ g√¨:
  var mySet = Set.from([1, 2, 2, 3, 3, 4]); //T·∫°o m·ªôt Set t·ª´ List, lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ tr√πng l·∫∑p(2,3)
  print(mySet.length); // K·∫øt qu·∫£ tr·∫£ ra {1,2,3,4} => ƒê·ªô d√†i l√† 4

  // B√†i 3: Map
    //3.1: Vi·∫øt code ƒë·ªÉ th·ª±c hi·ªán c√°c y/c sau:
    /* Th√™m email: 'nam@gmail.com'
       C·∫≠p nh·∫≠t age th√†nh 21
       X√≥a tr∆∞·ªùng isStudent
       Ki·ªÉm tra xem Map c√≥ ch·ª©a key 'phone' kh√¥ng */
   Map<String, dynamic> user = {
      'name' : 'Nam',
      'age' : '20',
      'isStudent' : true
   };

   user['email'] = 'nam@gmail.com';
   print(user); // k·∫øt qu·∫£: {name: Nam, age: 20, isStudent: true, email: nam@gmail.com}

   user['age'] = 21;
   print(user); // K·∫øt qu·∫£: {name: Nam, age: 21, isStudent: true, email: nam@gmail.com}

   user.remove('isStudent');
   print(user); // K·∫øt qu·∫£: {name: Nam, age: 21, email: nam@gmail.com}

    //Ki·ªÉm tra key 'phone'
   print(user.containsKey('phone')); // K·∫øt qu·∫£: false

  //3.2 So s√°nh hai c√°ch truy c·∫≠p gi√° tr·ªã trong Map:

     /* user['phone'] 
     GT: Tr·∫£ v·ªÅ null n·∫øu key kh√¥ng t·ªìn t·∫°i.
          Kh√¥ng an to√†n n·∫øu kh√¥ng ki·ªÉm tra tr∆∞·ªõc.
     -------------------     
     user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i' 
     GT: D√πng to√°n t·ª≠ ?? (null), tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu key kh√¥ng t·ªìn t·∫°i.
          An to√†n h∆°n, tr√°nh l·ªói khi key kh√¥ng c√≥.
     */
    
    //3.4 Vi·∫øt m·ªôt h√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value, m·ªói c·∫∑p tr√™n m·ªôt d√≤ng.
          void printMap(Map<String, dynamic> myMap) {
        myMap.forEach((key, value) {
          print('$key: $value');
        });
      }

      void mainMap() {
        Map<String, dynamic> user = {'name': 'Nam', 'age': 21, 'email': 'nam@gmail.com'};
        printMap(user);
      }
   // B√†i 4: Runes
    //4.1: ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨? Cho v√≠ d·ª• c·ª• th·ªÉ. 
    /*
    Runes ƒë·∫°i di·ªán cho c√°c ƒëi·ªÉm m√£ Unicode (code points) c·ªßa chu·ªói, th∆∞·ªùng d√πng ƒë·ªÉ x·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ emoji ho·∫∑c k√Ω t·ª± kh√¥ng thu·ªôc b·∫£ng m√£ ASCII.
    V√≠ d·ª•: Chu·ªói "Hello üòÄ" c√≥ k√Ω t·ª± emoji, Runes gi√∫p ph√¢n t√≠ch t·ª´ng ƒëi·ªÉm m√£ thay v√¨ ch·ªâ xem nh∆∞ chu·ªói k√Ω t·ª± th√¥ng th∆∞·ªùng.
    */
    //4.2: Vi·∫øt 1 ƒëo·∫°n code ch·ª©a m·∫∑t c∆∞·ªùi
        void mainRunes() {
      // T·∫°o Runes ch·ª©a emoji c∆∞·ªùi üòÄ
      var runes = Runes('\u{1F600}');

      // Chuy·ªÉn th√†nh String
      var emojiString = String.fromCharCodes(runes);
      print(emojiString); // üòÄ

      // In s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£
      print(runes.length); // 1
    }
}